import json

from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import StatesGroup, State

import aiohttp

from bot.config import settings
from bot.keyboards.keyboard import auth_buttons, main_buttons


router = Router()


class AuthStates(StatesGroup):
    waiting_email = State()
    waiting_password = State()
    waiting_register_email = State()
    waiting_register_login = State()
    waiting_register_password = State()
    waiting_imei = State()
    authenticated = State() 


@router.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.", reply_markup=auth_buttons)


@router.message(lambda message: message.text == "‚úÖ –í–æ–π—Ç–∏")
async def login(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email:")
    await state.set_state(AuthStates.waiting_email)


@router.message(lambda message: message.text == "üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def register(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
    await state.set_state(AuthStates.waiting_register_email)


@router.message(StateFilter(AuthStates.waiting_register_email))
async def process_register_email(message: types.Message, state: FSMContext):
    await state.update_data(email=message.text)
    await message.answer("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ª–æ–≥–∏–Ω:")
    await state.set_state(AuthStates.waiting_register_login)


@router.message(StateFilter(AuthStates.waiting_register_login))
async def process_register_login(message: types.Message, state: FSMContext):
    await state.update_data(login=message.text)
    await message.answer("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(AuthStates.waiting_register_password)


@router.message(StateFilter(AuthStates.waiting_register_password))
async def process_register_password(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    async with aiohttp.ClientSession() as session:
        async with session.post(f"{settings.API_URL}/auth/register", json={
            "email": data["email"],
            "login": data["login"],
            "password": message.text
        }) as resp:
            response_json = await resp.json()
            
            if resp.status == 200:
                await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.", reply_markup=auth_buttons)
            else:
                await message.answer(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response_json.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    await state.clear()


@router.message(lambda message: message.text == "‚úÖ –í–æ–π—Ç–∏")
async def login(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email:")
    await state.set_state(AuthStates.waiting_email)


@router.message(StateFilter(AuthStates.waiting_email))
async def process_email(message: types.Message, state: FSMContext):
    await state.update_data(email=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(AuthStates.waiting_password)


@router.message(StateFilter(AuthStates.waiting_password))
async def process_password(message: types.Message, state: FSMContext):
    data = await state.get_data()
    async with aiohttp.ClientSession() as session:
        async with session.post(f"{settings.API_URL}/auth/login", json={
            "email": data["email"],
            "password": message.text
        }) as resp:
            if resp.status == 200:
                cookies = resp.cookies
                print(f"Cookies received: {cookies}")
                token = cookies.get('imei_access_token')
                if token:
                    token_value = token.value
                    print(f"Token from cookies: {token_value}")
                    await state.update_data(token=token_value)
                    await state.set_state(AuthStates.authenticated)
                    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏!", reply_markup=main_buttons)
                else:
                    await message.answer("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—É–∫–∞—Ö.")
            else:
                response_json = await resp.json()
                await message.answer(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response_json.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")


@router.message(lambda message: message.text == "üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å IMEI")
async def ask_imei(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ IMEI –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    await state.set_state(AuthStates.waiting_imei)

@router.message(StateFilter(AuthStates.waiting_imei))
async def check_imei(message: types.Message, state: FSMContext):
    imei = message.text
    
    async with aiohttp.ClientSession() as session:
        headers = {
            'Authorization': f'Bearer {settings.TOKEN_SANDBOX}',
            'accept': 'application/json',
            'Content-Type': 'application/json',
        }

        async with session.post(f"{settings.API_URL}/check-imei/", json={"imei": imei}, headers=headers) as resp:
            if resp.status == 200:
                result = await resp.json()
                await message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}", reply_markup=main_buttons)
            else:
                try:
                    response_json = await resp.json()
                    await message.answer(f"–û—à–∏–±–∫–∞: {response_json.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                except json.JSONDecodeError:
                    response_text = await resp.text()
                    await message.answer(f"–û—à–∏–±–∫–∞: {response_text}")

    await state.clear()
